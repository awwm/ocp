{"version":3,"file":"betting-cal-block/bc-frontend.js","mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,wBAAwB;;AAExB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,kBAAkB;;AAElB;AACA;AACA;AACA;AACA;AACA,kBAAkB;;AAElB;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,gBAAgB,gBAAgB,eAAe;AAC/C;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA,uBAAuB;;;;;;;;;;;AC7JvB,eAAe,4HAAyC;AACxD;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;;;;;;UClCA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;ACtBA,IAAIA,IAAI,GAAGC,mBAAO,CAAC,8DAAgB,CAAC;AACpCC,QAAQ,CAACC,gBAAgB,CAAC,kBAAkB,EAA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","sources":["webpack://ocbc/./node_modules/fractional-arithmetic/fractional-arithmetic.js","webpack://ocbc/./node_modules/odds-converter/index.js","webpack://ocbc/webpack/bootstrap","webpack://ocbc/./src/betting-cal-block/bc-frontend.js"],"sourcesContent":["/**\n * fractional-arithmetic.js is a javascript library for doing fractional arithmetic\n * Author: Alexandros Georgiou <alex.georgiou@gmail.com>\n * \n */\n\nvar isInteger = function(i) {\n\treturn !isNaN( i ) && ( parseInt( i ) == parseFloat( i ) );\n};\n\nmodule.exports.isInteger = isInteger;\n\nvar gcd = function( a, b) {\n    a = Math.abs( a );\n    b = Math.abs( b );\n    var temp;\n    while ( b > 0 ) {\n        temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n};\n\nmodule.exports.gcd = gcd;\n\nvar lcm = function( a, b ) {\n    a = Math.abs( a );\n    b = Math.abs( b );\n    return a * ( b / gcd( a, b ) );\n};\nmodule.exports.lcm = lcm;\n\nfunction NotAFractionError(message) {\n    this.name = 'NotAFractionError';\n    this.message = message || 'Not a Fraction';\n}\n\nNotAFractionError.prototype = new Error();\nNotAFractionError.prototype.constructor = NotAFractionError;\n\nfunction Fraction( n, d ) {\n\t\n\tif ( typeof(n) === 'undefined' )\n\t\tthrow new NotAFractionError( 'You must specify a fraction' );\n\t\n\t// create without new keyword\n\tif ( ! ( this instanceof Fraction ) ) {\n\t\treturn new Fraction( n, d );\n\t}\n\t\n\t// create from fraction\n\tif ( n instanceof Fraction && typeof(d) === 'undefined' ) {\n\t\tthis.n = n.n;\n\t\tthis.d = n.d;\n\t\treturn;\n\t}\n\t\n\t//create from integers\n\tif ( isInteger(n) && isInteger(d)) {\n\t\tthis.n = parseInt(n);\n\t\tthis.d = parseInt(d);\n\t\treturn;\n\t}\n\t\n\t//create from one integer\n\tif ( isInteger(n) && typeof(d) === 'undefined') {\n\t\tthis.n = parseInt(n);\n\t\tthis.d = 1;\n\t\treturn;\n\t}\n\t\n\t\n\tif ( typeof(n) === 'number' ) {\n\t\tvar ns = '' + n;\n\t\tvar decimals = ns.length - ns.indexOf( '.' ) - 1;\n\t\tthis.n = parseInt( ns.replace( '.', '' ) );\n\t\tthis.d = Math.pow( 10, decimals );\n\t\treturn;\n\t}\n\t\n\tthrow new NotAFractionError(\n\t\t'Cannot instantiate Fraction(' + n + ( typeof(d) === 'undefined' ? '' : d ) + ')'\n\t);\n}\n\nFraction.prototype.toString = Fraction.prototype.toS = Fraction.prototype.inspect = function() {\n\treturn '(' + this.n + '/' + this.d + ')';\n};\n\nFraction.prototype.toNumber = function () {\n\treturn this.n / this.d;\n};\n\nFraction.prototype.toLatex = function() {\n\treturn '\\\\frac{' + this.n + '}{' + this.d + '}';\n};\n\nFraction.prototype.toMathML = function() {\n\treturn '<mfrac><mn>' + this.n + '</mn><mn>' + this.d + '</mfrac>';\n};\n\nFraction.prototype.simplify = function() {\n    if ( this.d < 0 ) {\n        this.n *= -1;\n        this.d *= -1;\n    }\n\tvar g = gcd( this.n, this.d );\n\treturn g == 1 ? this : new Fraction( this.n / g, this.d / g);\n};\n\nFraction.prototype.inverse = function() {\n\treturn new Fraction( this.d, this.n );\n};\n\nFraction.prototype.times = Fraction.prototype.multiply = function( n, d ) {\n\t\n\tif ( n instanceof Fraction && typeof(d) === 'undefined' ) {\n\t\treturn new Fraction( this.n * n.n, this.d * n.d ).simplify();\n\t} else if ( isInteger(n) && isInteger(d) ) {\n\t\treturn this.times( new Fraction( n, d ) );\n\t}\n\tthrow new NotAFractionError('Cannot multiply ' + this + ' with n=' + n + ', d=' + d );\n};\n\nFraction.prototype.dividedBy = Fraction.prototype.div = function( n, d ) {\n\t\n\tif ( n instanceof Fraction && typeof(d) === 'undefined' ) {\n\t\treturn n.inverse().times( this );\n\t} else if ( isInteger(n) && isInteger(d) ) {\n\t\treturn this.times( new Fraction( d, n ) );\n\t}\n\tthrow new NotAFractionError('Cannot divide '+this+' by n='+n+', d='+d);\n};\n\nFraction.prototype.plus = function( n, d ) {\n\t\n\tif ( n instanceof Fraction && typeof(d) === 'undefined') {\n\t\tvar l = lcm( this.d, n.d );\n\t\treturn new Fraction( this.n * l / this.d + n.n * l / n.d, l );\n\t} else if ( isInteger(n) && isInteger(d) ) {\n\t\treturn this.plus( new Fraction(n,d) );\n\t}\n\tthrow new NotAFractionError( 'Cannot add ' + this + ' to n=' + n + ', d=' + d );\n};\n\nFraction.prototype.minus = function( n, d ) {\n\t\n\tif ( n instanceof Fraction && typeof(d) === 'undefined' ) {\n\t\tvar l = lcm(this.d,n.d);\n\t\treturn new Fraction( this.n * l / this.d - n.n * l / n.d, l);\n\t} else if (isInteger(n) && isInteger(d)) {\n\t\treturn this.minus( new Fraction(n,d) );\n\t}\n\tthrow new NotAFractionError( 'Cannot add ' + this + ' to n=' + n + ', d=' + d);\n};\n\nmodule.exports.Fraction = Fraction;\n","var Fraction = require('fractional-arithmetic').Fraction;\nvar OddsConverter = OddsConverter || {};\n\nOddsConverter.decimal = {\n    toAmerican: function(decimal){\n        decimal < 2.0 ? moneyline = ( (-100)/(decimal - 1) ).toPrecision(5) : moneyline = ( (decimal - 1) * 100 ).toPrecision(5);\n        return moneyline;\n    },\n    toFractional: function(decimal){\n        fraction = new Fraction((decimal - 1));\n        return fraction;\n    }\n}\nOddsConverter.fraction = {\n    toAmerican: function(n,d){\n        n > d ? moneyline = ((n/d) * 100) : moneyline = (-100)/(n/d);\n        return moneyline;\n    },\n    toDecimal: function(n,d){\n        return decimal = (n/d) + 1;\n    }\n}\n\nOddsConverter.american = {\n    toDecimal: function(moneyline){\n        moneyline > 0 ? decimal = (moneyline/100) + 1 : decimal = ((100/Math.abs(moneyline)) + 1).toPrecision(3);\n        return decimal;\n    },\n    toFractional: function(moneyline){\n        moneyline > 0 ? fraction = new Fraction(moneyline/100) : fraction = new Fraction(100/Math.abs(moneyline));\n        return fraction;\n    }\n}\n\nmodule.exports = OddsConverter;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","let odds = require('odds-converter');\ndocument.addEventListener('DOMContentLoaded', () => {\n\n    const winningVal = document.getElementById('winning');\n    const payoutVal = document.getElementById('payout');\n\n    const betForm = document.querySelector('.form-wrapper');\n    const inputs = betForm.querySelectorAll('input');\n\n    const calcBetAmount = betForm.querySelector('#calc-bet-amount');\n    const moneyLineVal = betForm.querySelector('#calc-moneyline');\n    const fractionVal = betForm.querySelector('#calc-fractional');\n    const decimalVal = betForm.querySelector('#calc-decimal');\n    const impliedVal = betForm.querySelector('#calc-implied');\n\n    const calculatePercentage = (x, y) => {\n        return (x/y)*100;\n    }\n\n    const CalculateNewBalance = (e) => {\n        let target = e.target\n\n        if (!target.checkValidity()) {\n            document.getElementById('demo').innerHTML = target.validationMessage;\n          } else {\n            document.getElementById('demo').innerHTML = '';\n            if(calcBetAmount.value > 0 && target.name === 'calc-moneyline' && (target.value < -100 || target.value >= 100) ) {\n                fractionVal.value = odds.american.toFractional(parseInt(target.value)).simplify().n+ '/' + odds.decimal.toFractional(parseInt(target.value)).simplify().d;\n                decimalVal.value = odds.american.toDecimal(parseInt(target.value), calcBetAmount.value);\n                impliedVal.value = calculatePercentage(calcBetAmount.value, target.value).toFixed(2) + ' %';\n                winningVal.innerText = ((calcBetAmount.value * decimalVal.value) - calcBetAmount.value).toFixed(2);\n                payoutVal.innerText = (calcBetAmount.value * decimalVal.value).toFixed(2);\n            }\n    \n            if(calcBetAmount.value > 0 && target.name === 'calc-decimal' && target.value > 0 ) {\n                fractionVal.value = odds.decimal.toFractional(parseFloat(target.value)).simplify().n + '/' + odds.decimal.toFractional(parseFloat(target.value)).simplify().d;\n                moneyLineVal.value = odds.decimal.toAmerican(parseFloat(target.value));\n                impliedVal.value = calculatePercentage(calcBetAmount.value, moneyLineVal.value).toFixed(2) + ' %';\n                winningVal.innerText = ((calcBetAmount.value * decimalVal.value) - calcBetAmount.value).toFixed(2);\n                payoutVal.innerText = (calcBetAmount.value * decimalVal.value).toFixed(2);\n            }\n    \n            if(calcBetAmount.value > 0 && target.name === 'calc-fractional' ) {\n                let fractionArr = fractionVal.value;\n                let fractionArrVal = fractionArr.split(\"/\"); \n    \n                moneyLineVal.value = odds.fraction.toAmerican(parseInt(fractionArrVal[0]), parseInt(fractionArrVal[1]));\n                decimalVal.value = odds.american.toDecimal(parseInt(moneyLineVal.value), calcBetAmount.value);\n                impliedVal.value = calculatePercentage(calcBetAmount.value, moneyLineVal.value).toFixed(2) + ' %';            \n                winningVal.innerText = ((calcBetAmount.value * decimalVal.value) - calcBetAmount.value).toFixed(2);\n                payoutVal.innerText = (calcBetAmount.value * decimalVal.value).toFixed(2);\n            }\n          }\n    }\n    \n    ['input','change'].forEach( evt => {\n        inputs.forEach(input => input.addEventListener(evt, CalculateNewBalance, false))\n    } );\n});"],"names":["odds","require","document","addEventListener","winningVal","getElementById","payoutVal","betForm","querySelector","inputs","querySelectorAll","calcBetAmount","moneyLineVal","fractionVal","decimalVal","impliedVal","calculatePercentage","x","y","CalculateNewBalance","e","target","checkValidity","innerHTML","validationMessage","value","name","american","toFractional","parseInt","simplify","n","decimal","d","toDecimal","toFixed","innerText","parseFloat","toAmerican","fractionArr","fractionArrVal","split","fraction","forEach","evt","input"],"sourceRoot":""}